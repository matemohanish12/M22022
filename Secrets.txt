  "clientId": "3d70f322-cd4b-4c18-89f1-f6e06bd2cbf7",
  "clientSecret": "Gf82Q3UfWngH2QpffANh9_Mu8nkah.X~UT",
  "subscriptionId": "b69c2a11-bd8a-4349-b9d9-1c55bd839199",
  "tenantId": "4b33b6e8-313b-489d-a02b-725af517deab",
  "activeDirectoryEndpointUrl": "https://login.microsoftonline.com",
  "resourceManagerEndpointUrl": "https://management.azure.com/",
  "activeDirectoryGraphResourceId": "https://graph.windows.net/",
  "sqlManagementEndpointUrl": "https://management.core.windows.net:8443/",
  "galleryEndpointUrl": "https://gallery.azure.com/",
  "managementEndpointUrl": "https://management.core.windows.net/"


az ad sp create-for-rbac --name m2spnmaximus --role contributor --scope /subscriptions/b69c2a11-bd8a-4349-b9d9-1c55bd839199 --sdk-auth


Build.ArtifactStagingDirectory	= The local path on the agent where any artifacts are copied to before being pushed to their destination. For example: c:\agent_work\1\a
Build.SourcesDirectory	=         The local path on the agent where your source code files are downloaded. For example: c:\agent_work\1\s

#Structure of a YML file
trigger : none

parameters: 
- name: build
  displayName: 'Build app'
  type: boolean 
  default: false

variables:
- template: contoso-hotels-environment.variables.yml
- template: contoso-hotels.variables.yml

stages:
- stages: name of stage
  displayname
  condition: 
  jobs :
  - job: job1
    displayname: 'displayname of a job'
    pool:
     vmimage: windows-latest
    steps:
    - pwsh: |
    - task: ArchieveFiles@2
      displayname: 'displayname for task'
      inputs:
	inputparameter1: 'value1'
	inputparameter2: 'value2'
	inputparameter3: 'value3'
  - job: job2
  

Job: DSC
1. Download the DSC module from Internet
2. Unzip them in to ConfigureIIS directory
3. Copy files configureIIS.ps1 and compositresources to ConfigureIIS directory
4. Zip ConfigureIIS directory and save it at '$(Build.ArtifactStagingDirectory)\dsc\ConfigureIIS.zip'
5. Unzip other DSC modules needed for SQL Always On configuration them in to ConfigSQLAOn directory
6. Copy files ConfigSQLAOn.ps1 and compositresources to ConfigureIIS directory
7. Zip ConfigSQLAOn directory and save it at '$(Build.ArtifactStagingDirectory)\dsc\ConfigSQLAOn.zip'
8. Zip compositresources directory and save it at '$(Build.ArtifactStagingDirectory)\dsc\compositresources.zip'
9. PublishBuildArtifacts all DSC packages [Use this task in a build pipeline to publish build artifacts to Azure Pipelines, TFS, or a file share.]

Job: BuildSmartHotel
1. Download nugget package using nuggetcommand@2
2. Build the application using MSbuild
3. Zip the whole frontend folder i.e. Smarthotels.Registration.web folder & Backend SmartHotel.Registration.Wcf
4. Copy all the *.zip files to $(Build.ArtifactStagingDirectory)
5. PublishBuildArtifacts all DSC packages [Use this task in a build pipeline to publish build artifacts to Azure Pipelines, TFS, or a file share.]

Job: BuildClassicAppLoad
1. DotNetCoreCLI@2 along with build and the sln file path [Use this task to build, test, package, or publish a dotnet application, or to run a custom dotnet command]
2. Create a ZIP
3. And publish the artifacts


Stage: Deploy




- Stage : Deploy
  Displayname: As per requirement
  Depandancy: on Previous stage if any
  Conditions : if any from previous stages

  jobs:
  - Job: provider (JobName)
    Displayname: Register Resource Providers
    Condition:
    Pool:
     vmImage: Windows-Image,Ubuntu-Image	
    Steps:
    - tasks: Predefinedstasks from AZ DevOps 
      DisplayName: 
      Inputs :
	AzureSub
	ShellVersion
	Scripttype:'InlineScript'
	Inline: |
	 <Script that you want to execute>	
		

Job level Conditions to be checked 280